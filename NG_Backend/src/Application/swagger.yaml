openapi: 3.0.3
info:
  title: NG Cash back end
  description: |-
   Esse projeto foi desenvolvido para um processo seletivo para a NG Cash.


  license:
    name: MIT
    url: https://www.linkedin.com/in/thalles-v%C3%ADctor-760114208/
  version: 1.0.0

servers:
  - url: http://localhost:3333
    description: "server in localhost"
  - url: http://ngbackend:3333
    description: "server in container"
tags:
  - name: user
  
    
paths:
  /user:
    post:
      tags:
        - user
      summary: Crate a new user
      description: Essa rota cadastra um usuário na aplicação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                    userName:
                      type: string
                    password:
                      type: string
                    avatar:
                      type: string
                      format: byte
      responses:
        '201':
          description: with user created secessfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInOrSignOutResponse"
        '400':
          description: bad request because of invalid paramiters or usre alredy exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                    
  /user/login:
    post:
      tags:
        - user
      summary: login user
      description: Rota para fazer o login
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties: 
                user:
                  type: object
                  properties:
                    userName:
                      type: string
                    password:
                      type: string
         
      responses:
        '200':
          description: If parameters are passed validly and credentials are correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInOrSignOutResponse"
                        
        '400':
          description: if parameters are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
        '401':
          description: if the credentias are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /user/balance:
    get:
      tags:
        - user
      summary: get balance
      description: Get user account balance
      security: 
        - bearerAuth: []
      responses:
        '200': 
          description: Sucess
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceResponse"
        '400':
          description: Token required
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
  
  /user/recover:
    get:
      tags:
        - user
      summary: rcover user informations
      description: get user informations privately 
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Sucess fetiching user informations
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/RecoverUserInformationsResponse"
               
  /user/public/{userName}:
    get:
      tags: 
        - user
      summary: get public informations about any use
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userName
          schema:
            type: string
          required: true
      
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublicInformationsResponse"
          
        "404":
          description: User not found
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
          
        "400":
          description: Token required or params invalid
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
               
  /user/exist/{userName}:
    get:
      tags:
        - user
      summary: check is username is in use
      security:
        - bearerAuth: []
      parameters:
      - in: path
        name: userName
        schema:
          type: string
        required: true
        
      responses:
        "200": 
          description: user exist or not
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserExistReponse"
                
  "/user/transaction":
    post:
      tags:
        - user
      summary: create a transaction by sendding money to another plataform user
      security:
        - bearerAuth: []
      
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction:
                  type: object
                  properties:
                    targetUserName:
                      type: string
                    value:
                      type: integer
                    description:
                      type: string
        
      responses:
        "201":
          description: "When transaction created with sucess"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTransactionResponse"
          
          
        "400":
          description: parameters invalid or token required
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
          
    
components:
  schemas:
    ErrorResponse: 
      type: object
      properties:
        statusCode:
          type: string
        message:
          type: string

    SignInOrSignOutResponse:
      type: object
      properties:
        token:
          type: string
        user:
          type: object
          properties:
            name:
              type: string
            userName:
              type: string
            avatar:
              type: string
              
    RecoverUserInformationsResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id_pk:
              type: string
            name:
              type: string
            userName:
              type: string
            password:
              type: string
            avatar:
              type: string
  
    BalanceResponse:
      type: object
      properties:
        balance:
          type: integer 
          
    UserPublicInformationsResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            name: 
              type: string
            userName:
              type: string
            avatar: 
              type: string
              
    UserExistReponse:
      type: object
      properties:
        exist:
          type: boolean
          
    CreateTransactionResponse:
      type: object
      properties:
        transaction:
          type: object
          properties:
            id_pk:
              type: string
            value:
              type: integer
            debitedAccountId:
              type: string
            creditedAccountId:
              type: string
            accountId_pk:
              type: string
            createdAt:
              type: string
                
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      
        
          